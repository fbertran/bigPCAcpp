// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pca_spca_bigmatrix
SEXP pca_spca_bigmatrix(SEXP xpMat, bool center, bool scale, int ncomp, std::size_t block_size, int max_iter, double tol, bool return_scores, bool verbose);
RcppExport SEXP _bigPCAcpp_pca_spca_bigmatrix(SEXP xpMatSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP ncompSEXP, SEXP block_sizeSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP return_scoresSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpMat(xpMatSEXP);
    Rcpp::traits::input_parameter< bool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int >::type ncomp(ncompSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type block_size(block_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type return_scores(return_scoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_spca_bigmatrix(xpMat, center, scale, ncomp, block_size, max_iter, tol, return_scores, verbose));
    return rcpp_result_gen;
END_RCPP
}
// pca_bigmatrix
SEXP pca_bigmatrix(SEXP xpMat, bool center, bool scale, int ncomp, std::size_t block_size);
RcppExport SEXP _bigPCAcpp_pca_bigmatrix(SEXP xpMatSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP ncompSEXP, SEXP block_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpMat(xpMatSEXP);
    Rcpp::traits::input_parameter< bool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int >::type ncomp(ncompSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type block_size(block_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_bigmatrix(xpMat, center, scale, ncomp, block_size));
    return rcpp_result_gen;
END_RCPP
}
// svd_bigmatrix
SEXP svd_bigmatrix(SEXP xpMat, int nu, int nv, std::size_t block_size, std::string method);
RcppExport SEXP _bigPCAcpp_svd_bigmatrix(SEXP xpMatSEXP, SEXP nuSEXP, SEXP nvSEXP, SEXP block_sizeSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpMat(xpMatSEXP);
    Rcpp::traits::input_parameter< int >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type nv(nvSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type block_size(block_sizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(svd_bigmatrix(xpMat, nu, nv, block_size, method));
    return rcpp_result_gen;
END_RCPP
}
// pca_scores_bigmatrix
SEXP pca_scores_bigmatrix(SEXP xpMat, const NumericMatrix& rotation, const NumericVector& center, const NumericVector& scale, int ncomp, std::size_t block_size);
RcppExport SEXP _bigPCAcpp_pca_scores_bigmatrix(SEXP xpMatSEXP, SEXP rotationSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP ncompSEXP, SEXP block_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpMat(xpMatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type rotation(rotationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type center(centerSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int >::type ncomp(ncompSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type block_size(block_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_scores_bigmatrix(xpMat, rotation, center, scale, ncomp, block_size));
    return rcpp_result_gen;
END_RCPP
}
// pca_variable_loadings
NumericMatrix pca_variable_loadings(const NumericMatrix& rotation, const NumericVector& sdev);
RcppExport SEXP _bigPCAcpp_pca_variable_loadings(SEXP rotationSEXP, SEXP sdevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type rotation(rotationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sdev(sdevSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_variable_loadings(rotation, sdev));
    return rcpp_result_gen;
END_RCPP
}
// pca_variable_correlations
NumericMatrix pca_variable_correlations(const NumericMatrix& rotation, const NumericVector& sdev, const NumericVector& column_sd);
RcppExport SEXP _bigPCAcpp_pca_variable_correlations(SEXP rotationSEXP, SEXP sdevSEXP, SEXP column_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type rotation(rotationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sdev(sdevSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type column_sd(column_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_variable_correlations(rotation, sdev, column_sd));
    return rcpp_result_gen;
END_RCPP
}
// pca_variable_contributions
NumericMatrix pca_variable_contributions(const NumericMatrix& loadings);
RcppExport SEXP _bigPCAcpp_pca_variable_contributions(SEXP loadingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type loadings(loadingsSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_variable_contributions(loadings));
    return rcpp_result_gen;
END_RCPP
}
// pca_individual_contributions
NumericMatrix pca_individual_contributions(const NumericMatrix& scores, const NumericVector& sdev, double total_weight);
RcppExport SEXP _bigPCAcpp_pca_individual_contributions(SEXP scoresSEXP, SEXP sdevSEXP, SEXP total_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sdev(sdevSEXP);
    Rcpp::traits::input_parameter< double >::type total_weight(total_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_individual_contributions(scores, sdev, total_weight));
    return rcpp_result_gen;
END_RCPP
}
// pca_individual_cos2
NumericMatrix pca_individual_cos2(const NumericMatrix& scores);
RcppExport SEXP _bigPCAcpp_pca_individual_cos2(SEXP scoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type scores(scoresSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_individual_cos2(scores));
    return rcpp_result_gen;
END_RCPP
}
// pca_variable_cos2
NumericMatrix pca_variable_cos2(const NumericMatrix& correlations);
RcppExport SEXP _bigPCAcpp_pca_variable_cos2(SEXP correlationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type correlations(correlationsSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_variable_cos2(correlations));
    return rcpp_result_gen;
END_RCPP
}
// pca_spca_stream_bigmatrix
SEXP pca_spca_stream_bigmatrix(SEXP xpMat, SEXP xpRotation, bool center, bool scale, int ncomp, std::size_t block_size, int max_iter, double tol, bool return_scores, bool verbose);
RcppExport SEXP _bigPCAcpp_pca_spca_stream_bigmatrix(SEXP xpMatSEXP, SEXP xpRotationSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP ncompSEXP, SEXP block_sizeSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP return_scoresSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpMat(xpMatSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xpRotation(xpRotationSEXP);
    Rcpp::traits::input_parameter< bool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int >::type ncomp(ncompSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type block_size(block_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type return_scores(return_scoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_spca_stream_bigmatrix(xpMat, xpRotation, center, scale, ncomp, block_size, max_iter, tol, return_scores, verbose));
    return rcpp_result_gen;
END_RCPP
}
// pca_stream_bigmatrix
SEXP pca_stream_bigmatrix(SEXP xpMat, SEXP xpRotation, bool center, bool scale, int ncomp, std::size_t block_size);
RcppExport SEXP _bigPCAcpp_pca_stream_bigmatrix(SEXP xpMatSEXP, SEXP xpRotationSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP ncompSEXP, SEXP block_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpMat(xpMatSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xpRotation(xpRotationSEXP);
    Rcpp::traits::input_parameter< bool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int >::type ncomp(ncompSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type block_size(block_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_stream_bigmatrix(xpMat, xpRotation, center, scale, ncomp, block_size));
    return rcpp_result_gen;
END_RCPP
}
// pca_scores_stream_bigmatrix
SEXP pca_scores_stream_bigmatrix(SEXP xpMat, SEXP xpDest, const NumericMatrix& rotation, const NumericVector& center, const NumericVector& scale, int ncomp, std::size_t block_size);
RcppExport SEXP _bigPCAcpp_pca_scores_stream_bigmatrix(SEXP xpMatSEXP, SEXP xpDestSEXP, SEXP rotationSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP ncompSEXP, SEXP block_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpMat(xpMatSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xpDest(xpDestSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type rotation(rotationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type center(centerSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< int >::type ncomp(ncompSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type block_size(block_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_scores_stream_bigmatrix(xpMat, xpDest, rotation, center, scale, ncomp, block_size));
    return rcpp_result_gen;
END_RCPP
}
// pca_variable_loadings_stream_bigmatrix
SEXP pca_variable_loadings_stream_bigmatrix(SEXP xpRotation, const NumericVector& sdev, SEXP xpDest);
RcppExport SEXP _bigPCAcpp_pca_variable_loadings_stream_bigmatrix(SEXP xpRotationSEXP, SEXP sdevSEXP, SEXP xpDestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpRotation(xpRotationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sdev(sdevSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xpDest(xpDestSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_variable_loadings_stream_bigmatrix(xpRotation, sdev, xpDest));
    return rcpp_result_gen;
END_RCPP
}
// pca_variable_correlations_stream_bigmatrix
SEXP pca_variable_correlations_stream_bigmatrix(SEXP xpRotation, const NumericVector& sdev, const NumericVector& column_sd, SEXP xpDest);
RcppExport SEXP _bigPCAcpp_pca_variable_correlations_stream_bigmatrix(SEXP xpRotationSEXP, SEXP sdevSEXP, SEXP column_sdSEXP, SEXP xpDestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpRotation(xpRotationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sdev(sdevSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type column_sd(column_sdSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xpDest(xpDestSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_variable_correlations_stream_bigmatrix(xpRotation, sdev, column_sd, xpDest));
    return rcpp_result_gen;
END_RCPP
}
// pca_variable_contributions_stream_bigmatrix
SEXP pca_variable_contributions_stream_bigmatrix(SEXP xpLoadings, SEXP xpDest);
RcppExport SEXP _bigPCAcpp_pca_variable_contributions_stream_bigmatrix(SEXP xpLoadingsSEXP, SEXP xpDestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpLoadings(xpLoadingsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xpDest(xpDestSEXP);
    rcpp_result_gen = Rcpp::wrap(pca_variable_contributions_stream_bigmatrix(xpLoadings, xpDest));
    return rcpp_result_gen;
END_RCPP
}
// svd_robust_cpp
List svd_robust_cpp(const NumericMatrix& x, int ncomp, int max_iter, double tol, double huber_k);
RcppExport SEXP _bigPCAcpp_svd_robust_cpp(SEXP xSEXP, SEXP ncompSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP huber_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ncomp(ncompSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type huber_k(huber_kSEXP);
    rcpp_result_gen = Rcpp::wrap(svd_robust_cpp(x, ncomp, max_iter, tol, huber_k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bigPCAcpp_pca_spca_bigmatrix", (DL_FUNC) &_bigPCAcpp_pca_spca_bigmatrix, 9},
    {"_bigPCAcpp_pca_bigmatrix", (DL_FUNC) &_bigPCAcpp_pca_bigmatrix, 5},
    {"_bigPCAcpp_svd_bigmatrix", (DL_FUNC) &_bigPCAcpp_svd_bigmatrix, 5},
    {"_bigPCAcpp_pca_scores_bigmatrix", (DL_FUNC) &_bigPCAcpp_pca_scores_bigmatrix, 6},
    {"_bigPCAcpp_pca_variable_loadings", (DL_FUNC) &_bigPCAcpp_pca_variable_loadings, 2},
    {"_bigPCAcpp_pca_variable_correlations", (DL_FUNC) &_bigPCAcpp_pca_variable_correlations, 3},
    {"_bigPCAcpp_pca_variable_contributions", (DL_FUNC) &_bigPCAcpp_pca_variable_contributions, 1},
    {"_bigPCAcpp_pca_individual_contributions", (DL_FUNC) &_bigPCAcpp_pca_individual_contributions, 3},
    {"_bigPCAcpp_pca_individual_cos2", (DL_FUNC) &_bigPCAcpp_pca_individual_cos2, 1},
    {"_bigPCAcpp_pca_variable_cos2", (DL_FUNC) &_bigPCAcpp_pca_variable_cos2, 1},
    {"_bigPCAcpp_pca_spca_stream_bigmatrix", (DL_FUNC) &_bigPCAcpp_pca_spca_stream_bigmatrix, 10},
    {"_bigPCAcpp_pca_stream_bigmatrix", (DL_FUNC) &_bigPCAcpp_pca_stream_bigmatrix, 6},
    {"_bigPCAcpp_pca_scores_stream_bigmatrix", (DL_FUNC) &_bigPCAcpp_pca_scores_stream_bigmatrix, 7},
    {"_bigPCAcpp_pca_variable_loadings_stream_bigmatrix", (DL_FUNC) &_bigPCAcpp_pca_variable_loadings_stream_bigmatrix, 3},
    {"_bigPCAcpp_pca_variable_correlations_stream_bigmatrix", (DL_FUNC) &_bigPCAcpp_pca_variable_correlations_stream_bigmatrix, 4},
    {"_bigPCAcpp_pca_variable_contributions_stream_bigmatrix", (DL_FUNC) &_bigPCAcpp_pca_variable_contributions_stream_bigmatrix, 2},
    {"_bigPCAcpp_svd_robust_cpp", (DL_FUNC) &_bigPCAcpp_svd_robust_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_bigPCAcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
