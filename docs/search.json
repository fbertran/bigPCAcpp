[{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Scaling Principal Component Analysis with bigPCA","text":"bigPCA package provides principal component analysis (PCA) routines operate directly bigmemory::big.matrix objects. vignette walks complete analysis workflow compares results reference implementation base R’s prcomp() demonstrate numerical agreement. use classic iris measurement data small, -memory example. Even larger data sets stored disk, workflow identical big.matrix descriptor created.","code":""},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"preparing-a-big-matrix","dir":"Articles","previous_headings":"","what":"Preparing a big.matrix","title":"Scaling Principal Component Analysis with bigPCA","text":"Every bigPCA entry point accepts big.matrix object directly (, compatibility, still works external pointers via @address slot), allowing analyses without copying data regular R matrices.","code":"library(bigmemory) library(bigPCA)  iris_mat <- as.matrix(iris[, 1:4]) big_iris <- as.big.matrix(iris_mat, type = \"double\")"},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"running-pca-with-bigpca","dir":"Articles","previous_headings":"","what":"Running PCA with bigPCA","title":"Scaling Principal Component Analysis with bigPCA","text":"returned list mirrors structure prcomp object: singular values (sdev), rotation matrix (rotation), optional centering scaling vectors, additional diagnostics including covariance matrix explained variance ratios.","code":"big_pca <- pca_bigmatrix(   xpMat = big_iris,   center = TRUE,   scale = TRUE,   ncomp = 4L,   block_size = 128L ) str(big_pca) #> List of 10 #>  $ sdev               : num [1:4] 1.708 0.956 0.383 0.144 #>  $ rotation           : num [1:4, 1:4] 0.521 -0.269 0.58 0.565 0.377 ... #>  $ center             : num [1:4] 5.84 3.06 3.76 1.2 #>  $ scale              : num [1:4] 0.828 0.436 1.765 0.762 #>  $ column_sd          : num [1:4] 0.828 0.436 1.765 0.762 #>  $ eigenvalues        : num [1:4] 2.9185 0.914 0.1468 0.0207 #>  $ explained_variance : num [1:4] 0.72962 0.22851 0.03669 0.00518 #>  $ cumulative_variance: num [1:4] 0.73 0.958 0.995 1 #>  $ covariance         : num [1:4, 1:4] 1 -0.118 0.872 0.818 -0.118 ... #>  $ nobs               : num 150 #>  - attr(*, \"backend\")= chr \"bigmemory\" #>  - attr(*, \"class\")= chr [1:3] \"bigpca_bigmemory\" \"bigpca\" \"list\""},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"comparing-against-prcomp","dir":"Articles","previous_headings":"","what":"Comparing against prcomp","title":"Scaling Principal Component Analysis with bigPCA","text":"maximum absolute deviations base implementation bigPCA negligible (order numerical precision), showing --core algorithm faithfully reproduces components scores.","code":"base_pca <- prcomp(iris_mat, center = TRUE, scale. = TRUE)  align_columns <- function(reference, target) {   aligned <- target   cols <- min(ncol(reference), ncol(target))   for (j in seq_len(cols)) {     ref <- reference[, j]     tgt <- target[, j]     if (sum((ref - tgt)^2) > sum((ref + tgt)^2)) {       aligned[, j] <- -tgt     }   }   aligned }  rotation_aligned <- align_columns(base_pca$rotation, big_pca$rotation) max_rotation_error <- max(abs(rotation_aligned - base_pca$rotation)) max_sdev_error <- max(abs(big_pca$sdev - base_pca$sdev))  big_scores <- pca_scores_bigmatrix(   xpMat = big_iris,   rotation = big_pca$rotation,   center = big_pca$center,   scale = big_pca$scale,   block_size = 128L )  scores_aligned <- align_columns(base_pca$x, big_scores) max_score_error <- max(abs(scores_aligned - base_pca$x))  c(   rotation = max_rotation_error,   sdev = max_sdev_error,   scores = max_score_error ) #>     rotation         sdev       scores  #> 3.441691e-15 1.110223e-15 7.993606e-15"},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"variable-relationships","dir":"Articles","previous_headings":"","what":"Variable relationships","title":"Scaling Principal Component Analysis with bigPCA","text":"exported helpers expose common PCA diagnostics without requiring original data matrix memory. Loadings match scaled rotation matrix, correlations rescale loadings back onto original variable standard deviations, contributions report relative importance variable within component.","code":"loadings <- pca_variable_loadings(big_pca$rotation, big_pca$sdev) correlations <- pca_variable_correlations(   big_pca$rotation,   big_pca$sdev,   big_pca$column_sd ) contributions <- pca_variable_contributions(loadings)  head(loadings) #>            [,1]       [,2]        [,3]        [,4] #> [1,]  0.8901688 0.36082989  0.27565767 -0.03760602 #> [2,] -0.4601427 0.88271627 -0.09361987  0.01777631 #> [3,]  0.9915552 0.02341519 -0.05444699  0.11534978 #> [4,]  0.9649790 0.06399985 -0.24298265 -0.07535950 head(correlations) #>            [,1]       [,2]        [,3]        [,4] #> [1,]  1.0749972 0.43575009  0.33289330 -0.04541427 #> [2,] -1.0556969 2.02519970 -0.21479035  0.04078385 #> [3,]  0.5616927 0.01326415 -0.03084294  0.06534294 #> [4,]  1.2659817 0.08396311 -0.31877545 -0.09886615 head(contributions) #>            [,1]         [,2]       [,3]       [,4] #> [1,] 0.27150969 0.1424440565 0.51777574 0.06827052 #> [2,] 0.07254804 0.8524748749 0.05972245 0.01525463 #> [3,] 0.33687936 0.0005998389 0.02019990 0.64232089 #> [4,] 0.31906291 0.0044812296 0.40230191 0.27415396"},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"visualising-pca-results","dir":"Articles","previous_headings":"","what":"Visualising PCA results","title":"Scaling Principal Component Analysis with bigPCA","text":"companion plotting helpers make straightforward inspect components returned bigPCA. Scree plot variance explained component. scree plot summarises much variance component explains makes easy identify natural cutoffs. Scores first two principal components. Score plots provide quick way compare sample relationships using requested principal components without materialising full score matrix.","code":"pca_plot_scree(big_pca) pca_plot_scores(   big_iris,   rotation = big_pca$rotation,   center = big_pca$center,   scale = big_pca$scale,   max_points = nrow(big_iris),   sample = \"head\" )"},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"next-steps-for-larger-data","dir":"Articles","previous_headings":"","what":"Next steps for larger data","title":"Scaling Principal Component Analysis with bigPCA","text":"-disk matrices created filebacked.big.matrix(), pass descriptor pointer pca_bigmatrix() algorithm stream data blocks, keeping memory usage bounded. Component scores can likewise generated batches using pca_scores_bigalgebra(). scores stored disk, can sampled plotted just like -memory workflow: Scores streamed file-backed big.matrix. building blocks, bigPCA enables analyses match accuracy -memory PCA workflows scaling data sets exceed RAM.","code":"library(bigmemory) library(bigPCA)  path <- tempfile(fileext = \".bin\") desc <- paste0(path, \".desc\")  bm <- filebacked.big.matrix(   nrow = nrow(iris_mat),   ncol = ncol(iris_mat),   type = \"double\",   backingfile = basename(path),   backingpath = dirname(path),   descriptorfile = basename(desc) )  bm[,] <- iris_mat  pca <- pca_bigalgebra(bm, center = TRUE, scale = TRUE, ncomp = 4) scores <- filebacked.big.matrix(   nrow = nrow(bm),   ncol = ncol(pca$rotation),   type = \"double\",   backingfile = \"scores.bin\",   backingpath = dirname(path),   descriptorfile = \"scores.desc\" )  pca_scores_bigalgebra(   bm,   scores,   pca$rotation,   center = pca$center,   scale = pca$scale ) #> <pointer: 0x1496a2560> pca_plot_scores(   bm,   rotation = pca$rotation,   center = pca$center,   scale = pca$scale,   components = c(1L, 2L),   max_points = nrow(bm),   sample = \"head\" ) library(bigmemory) library(bigPCA)  path <- tempfile(fileext = \".bin\") desc <- paste0(path, \".desc\")  bm <- filebacked.big.matrix(   nrow = 5000,   ncol = 50,   type = \"double\",   backingfile = basename(path),   backingpath = dirname(path),   descriptorfile = basename(desc) )  pca <- pca_bigmatrix(bm, center = TRUE, scale = TRUE, ncomp = 5) scores <- filebacked.big.matrix(   nrow = nrow(bm),   ncol = ncol(pca$rotation),   type = \"double\",   backingfile = \"scores.bin\",   backingpath = dirname(path),   descriptorfile = \"scores.desc\" )  pca_scores_bigmatrix(   bm,   pca$rotation,   scores,   center = pca$center,   scale = pca$scale )"},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCAcpp.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Scaling Principal Component Analysis with bigPCAcpp","text":"bigPCAcpp package provides principal component analysis (PCA) routines operate directly bigmemory::big.matrix objects. vignette walks complete analysis workflow compares results reference implementation base R’s prcomp() demonstrate numerical agreement. use classic iris measurement data small, -memory example. Even larger data sets stored disk, workflow identical big.matrix descriptor created.","code":""},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCAcpp.html","id":"preparing-a-big-matrix","dir":"Articles","previous_headings":"","what":"Preparing a big.matrix","title":"Scaling Principal Component Analysis with bigPCAcpp","text":"Every bigPCAcpp entry point accepts big.matrix object directly (, compatibility, still works external pointers via @address slot), allowing analyses without copying data regular R matrices.","code":"library(bigmemory) library(bigPCAcpp)  iris_mat <- as.matrix(iris[, 1:4]) big_iris <- as.big.matrix(iris_mat, type = \"double\")"},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCAcpp.html","id":"running-pca-with-bigpcacpp","dir":"Articles","previous_headings":"","what":"Running PCA with bigPCAcpp","title":"Scaling Principal Component Analysis with bigPCAcpp","text":"returned list mirrors structure prcomp object: singular values (sdev), rotation matrix (rotation), optional centering scaling vectors, additional diagnostics including covariance matrix explained variance ratios.","code":"big_pca <- pca_bigmatrix(   xpMat = big_iris,   center = TRUE,   scale = TRUE,   ncomp = 4L,   block_size = 128L ) str(big_pca) #> List of 10 #>  $ sdev               : num [1:4] 1.708 0.956 0.383 0.144 #>  $ rotation           : num [1:4, 1:4] 0.521 -0.269 0.58 0.565 0.377 ... #>  $ center             : num [1:4] 5.84 3.06 3.76 1.2 #>  $ scale              : num [1:4] 0.828 0.436 1.765 0.762 #>  $ column_sd          : num [1:4] 0.828 0.436 1.765 0.762 #>  $ eigenvalues        : num [1:4] 2.9185 0.914 0.1468 0.0207 #>  $ explained_variance : num [1:4] 0.72962 0.22851 0.03669 0.00518 #>  $ cumulative_variance: num [1:4] 0.73 0.958 0.995 1 #>  $ covariance         : num [1:4, 1:4] 1 -0.118 0.872 0.818 -0.118 ... #>  $ nobs               : num 150 #>  - attr(*, \"backend\")= chr \"bigmemory\" #>  - attr(*, \"class\")= chr [1:3] \"bigpca_bigmemory\" \"bigpca\" \"list\""},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCAcpp.html","id":"comparing-against-prcomp","dir":"Articles","previous_headings":"","what":"Comparing against prcomp","title":"Scaling Principal Component Analysis with bigPCAcpp","text":"maximum absolute deviations base implementation bigPCAcpp negligible (order numerical precision), showing --core algorithm faithfully reproduces components scores.","code":"base_pca <- prcomp(iris_mat, center = TRUE, scale. = TRUE)  align_columns <- function(reference, target) {   aligned <- target   cols <- min(ncol(reference), ncol(target))   for (j in seq_len(cols)) {     ref <- reference[, j]     tgt <- target[, j]     if (sum((ref - tgt)^2) > sum((ref + tgt)^2)) {       aligned[, j] <- -tgt     }   }   aligned }  rotation_aligned <- align_columns(base_pca$rotation, big_pca$rotation) max_rotation_error <- max(abs(rotation_aligned - base_pca$rotation)) max_sdev_error <- max(abs(big_pca$sdev - base_pca$sdev))  big_scores <- pca_scores_bigmatrix(   xpMat = big_iris,   rotation = big_pca$rotation,   center = big_pca$center,   scale = big_pca$scale,   block_size = 128L )  scores_aligned <- align_columns(base_pca$x, big_scores) max_score_error <- max(abs(scores_aligned - base_pca$x))  c(   rotation = max_rotation_error,   sdev = max_sdev_error,   scores = max_score_error ) #>     rotation         sdev       scores  #> 3.441691e-15 1.110223e-15 7.993606e-15"},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCAcpp.html","id":"variable-relationships","dir":"Articles","previous_headings":"","what":"Variable relationships","title":"Scaling Principal Component Analysis with bigPCAcpp","text":"exported helpers expose common PCA diagnostics without requiring original data matrix memory. Loadings match scaled rotation matrix, correlations rescale loadings back onto original variable standard deviations, contributions report relative importance variable within component.","code":"loadings <- pca_variable_loadings(big_pca$rotation, big_pca$sdev) correlations <- pca_variable_correlations(   big_pca$rotation,   big_pca$sdev,   big_pca$column_sd ) contributions <- pca_variable_contributions(loadings)  head(loadings) #>            [,1]       [,2]        [,3]        [,4] #> [1,]  0.8901688 0.36082989  0.27565767 -0.03760602 #> [2,] -0.4601427 0.88271627 -0.09361987  0.01777631 #> [3,]  0.9915552 0.02341519 -0.05444699  0.11534978 #> [4,]  0.9649790 0.06399985 -0.24298265 -0.07535950 head(correlations) #>            [,1]       [,2]        [,3]        [,4] #> [1,]  1.0749972 0.43575009  0.33289330 -0.04541427 #> [2,] -1.0556969 2.02519970 -0.21479035  0.04078385 #> [3,]  0.5616927 0.01326415 -0.03084294  0.06534294 #> [4,]  1.2659817 0.08396311 -0.31877545 -0.09886615 head(contributions) #>            [,1]         [,2]       [,3]       [,4] #> [1,] 0.27150969 0.1424440565 0.51777574 0.06827052 #> [2,] 0.07254804 0.8524748749 0.05972245 0.01525463 #> [3,] 0.33687936 0.0005998389 0.02019990 0.64232089 #> [4,] 0.31906291 0.0044812296 0.40230191 0.27415396"},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCAcpp.html","id":"visualising-pca-results","dir":"Articles","previous_headings":"","what":"Visualising PCA results","title":"Scaling Principal Component Analysis with bigPCAcpp","text":"companion plotting helpers make straightforward inspect components returned bigPCAcpp. Scree plot variance explained component. scree plot summarises much variance component explains makes easy identify natural cutoffs. Scores first two principal components. Score plots provide quick way compare sample relationships using requested principal components without materialising full score matrix.","code":"pca_plot_scree(big_pca) pca_plot_scores(   big_iris,   rotation = big_pca$rotation,   center = big_pca$center,   scale = big_pca$scale,   max_points = nrow(big_iris),   sample = \"head\" )"},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCAcpp.html","id":"next-steps-for-larger-data","dir":"Articles","previous_headings":"","what":"Next steps for larger data","title":"Scaling Principal Component Analysis with bigPCAcpp","text":"-disk matrices created filebacked.big.matrix(), pass descriptor pointer pca_bigmatrix() algorithm stream data blocks, keeping memory usage bounded. Component scores can likewise generated batches using pca_scores_stream_bigmatrix(). scores stored disk, can sampled plotted just like -memory workflow: Scores streamed file-backed big.matrix. building blocks, bigPCAcpp enables analyses match accuracy -memory PCA workflows scaling data sets exceed RAM.","code":"library(bigmemory) library(bigPCAcpp)  path <- tempfile(fileext = \".bin\") desc <- paste0(path, \".desc\")  bm <- filebacked.big.matrix(   nrow = nrow(iris_mat),   ncol = ncol(iris_mat),   type = \"double\",   backingfile = basename(path),   backingpath = dirname(path),   descriptorfile = basename(desc) )  bm[,] <- iris_mat  pca <- pca_bigmatrix(bm, center = TRUE, scale = TRUE, ncomp = 4) scores <- filebacked.big.matrix(   nrow = nrow(bm),   ncol = ncol(pca$rotation),   type = \"double\",   backingfile = \"scores.bin\",   backingpath = dirname(path),   descriptorfile = \"scores.desc\" )  pca_scores_stream_bigmatrix(   bm,   scores,   pca$rotation,   center = pca$center,   scale = pca$scale ) #> <pointer: 0x1087add60> pca_plot_scores(   bm,   rotation = pca$rotation,   center = pca$center,   scale = pca$scale,   components = c(1L, 2L),   max_points = nrow(bm),   sample = \"head\" ) library(bigmemory) library(bigPCAcpp)  path <- tempfile(fileext = \".bin\") desc <- paste0(path, \".desc\")  bm <- filebacked.big.matrix(   nrow = 5000,   ncol = 50,   type = \"double\",   backingfile = basename(path),   backingpath = dirname(path),   descriptorfile = basename(desc) )  pca <- pca_bigmatrix(bm, center = TRUE, scale = TRUE, ncomp = 5) scores <- filebacked.big.matrix(   nrow = nrow(bm),   ncol = ncol(pca$rotation),   type = \"double\",   backingfile = \"scores.bin\",   backingpath = dirname(path),   descriptorfile = \"scores.desc\" )  pca_scores_stream_bigmatrix(   bm,   scores,   pca$rotation,   center = pca$center,   scale = pca$scale )"},{"path":"https://fbertran.github.io/bigPCA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Frederic Bertrand. Author, maintainer.","code":""},{"path":"https://fbertran.github.io/bigPCA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frédéric Bertrand (2025). Principal Component Analysis 'bigmemory' Matrices, R package version 0.1.0.","code":"@Manual{,   title = {Principal Component Analysis for 'bigmemory' Matrices},   author = {Frederic Bertrand},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":[]},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"frédéric-bertrand","dir":"","previous_headings":"","what":"Frédéric Bertrand","title":"Principal Component Analysis for bigmemory Matrices","text":"bigPCAcpp package provides high performance principal component analysis (PCA) routines bigmemory::big.matrix objects. package streams data BLAS LAPACK kernels large matrices can analysed without first copying native R matrices. also includes helpers export PCA diagnostics scores, loadings, correlations, contributions file-backed big.matrix allocations suitable downstream analysis pipelines. bigPCAcpp exposes two complementary backends: bigmemory – operates directly -memory file-backed big.matrix objects using bigmemory C++ API. bigalgebra – writes results bigalgebra matrices large studies can keep intermediate artifacts --memory benefiting native BLAS/LAPACK performance. workflows make possible analyse data sets exceed available RAM keeping numerical stability double-precision accumulation LAPACK eigen decompositions.","code":""},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Principal Component Analysis for bigmemory Matrices","text":"can install development version bigPCAcpp GitHub : prefer local source install, clone repository run: workflows rely streaming big.matrix helpers, ensure bigalgebra package installed:","code":"# install.packages(\"devtools\") devtools::install_github(\"fbertran/bigPCAcpp\") R CMD build bigPCAcpp R CMD INSTALL bigPCAcpp_0.0.1.tar.gz install.packages(\"bigalgebra\")"},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"options","dir":"","previous_headings":"","what":"Options","title":"Principal Component Analysis for bigmemory Matrices","text":"package defines several options control numerical tolerances workspace allocation. prefixed bigPCAcpp. include: options can changed options() runtime. example, options(bigPCAcpp.block_size = 5000L) increases streaming block size.","code":""},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Principal Component Analysis for bigmemory Matrices","text":"examples demonstrate bigmemory workflow compare results base R’s prcomp() implementation. pca_bigmatrix() can also focus subset leading components streaming results file-backed matrices. following snippet stores first four principal components keeps running summary scores. stream diagnostics bigmemory-backed matrices, use corresponding helper functions:","code":"library(bigmemory) library(bigPCAcpp)  # Allocate a 1,000 x 25 big.matrix with simulated values n <- 1000 p <- 25 bm <- bigmemory::big.matrix(n, p, type = \"double\") bm[,] <- matrix(rnorm(n * p), nrow = n)  # Run PCA and extract eigenvalues and rotation res <- pca_bigmatrix(bm, center = TRUE, scale. = TRUE) res$importance res$rotation[1:5, 1:3]  # Generate PCA scores in bigmemory-backed storage scores <- bigmemory::filebacked.big.matrix(n, ncol = 3, type = \"double\") pca_scores_stream_bigmatrix(   bm,   scores,   res$rotation[, 1:3],   center = res$center,   scale = res$scale ) scores[1:5, ]  # Compare with prcomp() pr <- prcomp(bm[], center = TRUE, scale. = TRUE) all.equal(unclass(pr$rotation)[, 1:3], res$rotation[, 1:3], tolerance = 1e-6) library(bigmemory) library(bigPCAcpp)  set.seed(2025) bm <- bigmemory::filebacked.big.matrix(nrow = 1500, ncol = 40, type = \"double\") bm[,] <- matrix(rnorm(1500 * 40), nrow = 1500)  # Request only the first four components top_pca <- pca_bigmatrix(bm, center = TRUE, scale. = TRUE, ncomp = 4) top_pca$sdev  # Stream the corresponding scores into a file-backed allocation scores_fb <- bigmemory::filebacked.big.matrix(nrow = nrow(bm), ncol = 4, type = \"double\") pca_scores_stream_bigmatrix(   bm,   scores_fb,   top_pca$rotation[, 1:4],   center = top_pca$center,   scale = top_pca$scale )  # Inspect a lightweight summary without loading the entire matrix colMeans(scores_fb[, 1:2]) apply(scores_fb[, 1:2], 2, sd) library(bigmemory) library(bigalgebra) library(bigPCAcpp)  n <- 1000 p <- 25 bm <- bigmemory::filebacked.big.matrix(n, p, type = \"double\") bm[,] <- matrix(rnorm(n * p), nrow = n)  rotation <- bigmemory::big.matrix(nrow = p, ncol = p) loadings <- bigmemory::big.matrix(nrow = p, ncol = p) correlations <- bigmemory::big.matrix(nrow = p, ncol = p) contrib <- bigmemory::big.matrix(nrow = p, ncol = p)  pca_stream <- pca_stream_bigmatrix(bm, xpRotation = rotation, center = TRUE, scale = FALSE) pca_variable_loadings_stream_bigmatrix(rotation, pca_stream$sdev, loadings) pca_variable_correlations_stream_bigmatrix(rotation, pca_stream$sdev, correlations) pca_variable_contributions_stream_bigmatrix(loadings, contrib)"},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"robust-pca-and-singular-value-decompositions","dir":"","previous_headings":"Examples","what":"Robust PCA and singular value decompositions","title":"Principal Component Analysis for bigmemory Matrices","text":"Robust workflows dampen influence outliers retaining familiar PCA interface. pca_robust() helper centres variables median, optionally scales MAD, relies iteratively reweighted SVD derive principal components. robust solver exposed directly via svd_robust() use custom pipelines, streaming-friendly svd_bigmatrix() wrapper computes classical SVDs big.matrix objects without materialising dense copies memory. Robust decompositions -weight contaminated observations classical stream demonstrates fetch singular vectors without materialising dense matrix. robust solver also exposes per-row weights can reused flag problematic observations inspection.","code":"library(bigmemory) library(bigPCAcpp)  set.seed(42) mat <- matrix(rnorm(200), nrow = 40, ncol = 5) mat[1, 1] <- 15  # introduce an outlier  # Robust PCA keeps the outlier from dominating the rotation robust <- pca_robust(mat, ncomp = 3) robust$explained_variance  # Classical PCA on the same data highlights the impact of the outlier bm_small <- bigmemory::big.matrix(nrow = nrow(mat), ncol = ncol(mat), type = \"double\") bm_small[,] <- mat classical <- pca_bigmatrix(bm_small, center = TRUE, scale. = TRUE, ncomp = 3) cbind(classical = classical$rotation[1:5, 1], robust = robust$rotation[1:5, 1])  # Classical SVD on a file-backed big.matrix bm <- bigmemory::filebacked.big.matrix(200, 10, type = \"double\") bm[,] <- matrix(rnorm(2000), nrow = 200) svd_stream <- svd_bigmatrix(bm, nu = 3, nv = 3) svd_stream$d  # Direct access to the robust SVD routine svd_out <- svd_robust(mat, ncomp = 3) svd_out$d svd_out$weights[1:6]"},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"plotting-diagnostics","dir":"","previous_headings":"Examples","what":"Plotting diagnostics","title":"Principal Component Analysis for bigmemory Matrices","text":"bigPCAcpp bundles plot helpers operate dense matrices big.matrix backends. snippets illustrate call function using results pca_bigmatrix(). instance, pca_plot_scores() helper samples observations draws scatter plot scores chosen pair components, particularly useful need visually assess potential clusters without loading full data set memory.","code":"library(bigmemory) library(bigPCAcpp)  set.seed(123) bm <- bigmemory::big.matrix(500, 6, type = \"double\") bm[,] <- matrix(rnorm(500 * 6), nrow = 500) res <- pca_bigmatrix(bm, center = TRUE, scale. = TRUE)  # Scree plot of explained variance pca_plot_scree(res)  # Scatter plot of sampled scores on PCs 1 and 2 pca_plot_scores(   bm,   res$rotation,   center = res$center,   scale = res$scale,   components = c(1L, 2L),   max_points = 2000L,   seed = 2024 )  # Contribution bar plot for the leading component loadings <- pca_variable_loadings(res$rotation, res$sdev) contrib <- pca_variable_contributions(loadings) pca_plot_contributions(contrib, component = 1L, top_n = 10L)  # Correlation circle for the first two components correlations <- pca_variable_correlations(res$rotation, res$sdev, res$column_sd) pca_plot_correlation_circle(correlations, components = c(1L, 2L))  # Biplot combining scores and loadings scores <- res$scores if (is.null(scores)) {   scores <- pca_scores_bigmatrix(bm, res$rotation, center = res$center, scale = res$scale) } pca_plot_biplot(scores, loadings, components = c(1L, 2L))"},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Principal Component Analysis for bigmemory Matrices","text":"use bigPCAcpp academic work, please cite: Bertrand F. (2025). bigPCAcpp: Principal Component Analysis bigmemory Matrices.","code":""},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"maintainer","dir":"","previous_headings":"","what":"Maintainer","title":"Principal Component Analysis for bigmemory Matrices","text":"Maintainer: Frédéric Bertrand frederic.bertrand@lecnam.net questions, bug reports, contributions, please open issue GitHub.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/bigPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"BigPCA result objects — bigpca","title":"BigPCA result objects — bigpca","text":"Results returned pca_bigmatrix(), pca_stream_bigmatrix(), pca_robust() inherit bigpca class. objects store component standard deviations, rotation/loadings, optional scores recording computational backend produced . Standard S3 generics summary() plot() implemented convenience. bigpca objects lists produced pca_bigmatrix(), pca_stream_bigmatrix(), pca_robust(), related helpers. mirror structure base R's prcomp() outputs tracking additional metadata large-scale streaming computations. #' @seealso pca_bigmatrix(), pca_stream_bigmatrix(), pca_robust(), pca_plot_scree(), pca_plot_scores(), pca_plot_contributions(), pca_plot_correlation_circle(), pca_plot_biplot().","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/bigPCA.html","id":"components","dir":"Reference","previous_headings":"","what":"Components","title":"BigPCA result objects — bigpca","text":"sdev Numeric vector component standard deviations. rotation Numeric matrix whose columns contain variable loadings (principal axes). center, scale Optional numeric vectors describing centring scaling applied variable fitting model. scores Optional numeric matrix principal component scores computed alongside decomposition. column_sd Numeric vector marginal standard deviations input variable. eigenvalues Numeric vector eigenvalues associated retained components. explained_variance, cumulative_variance Numeric vectors summarising fraction variance explained individual components corresponding cumulative totals. covariance Sample covariance matrix used derive components. nobs Number observations used decomposition. class also records computation backend via attr(x, \"backend\"), enabling downstream methods adjust behaviour streamed robust results.","code":""},{"path":[]},{"path":"https://fbertran.github.io/bigPCA/reference/bigPCAcpp.html","id":null,"dir":"Reference","previous_headings":"","what":"bigPCAcpp: Principal Component Analysis for bigmemory Matrices — bigPCAcpp","title":"bigPCAcpp: Principal Component Analysis for bigmemory Matrices — bigPCAcpp","text":"bigPCAcpp package provides high-performance principal component analysis routines work directly bigmemory::big.matrix objects. Data streamed BLAS LAPACK kernels large, file-backed matrices can analysed without materialising dense copies R. Companion helpers compute scores, loadings, correlations, contributions, including streaming variants write results bigmemory::big.matrix destinations used file-based pipelines.","code":""},{"path":[]},{"path":"https://fbertran.github.io/bigPCA/reference/bigPCAcpp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bigPCAcpp: Principal Component Analysis for bigmemory Matrices — bigPCAcpp","text":"Maintainer: Frederic Bertrand frederic.bertrand@lecnam.net","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/bigPCAcpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bigPCAcpp: Principal Component Analysis for bigmemory Matrices — bigPCAcpp","text":"","code":"if (FALSE) { # \\dontrun{ library(bigmemory) mat <- as.big.matrix(matrix(rnorm(20), nrow = 5)) result <- pca_bigmatrix(mat) result$sdev } # }"},{"path":"https://fbertran.github.io/bigPCA/reference/new_bigpca_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal constructors and S3 methods for bigPCAcpp results — new_bigpca_result","title":"Internal constructors and S3 methods for bigPCAcpp results — new_bigpca_result","text":"helpers provide light-weight S3 layer around PCA outputs users can interact familiar generics summary() plot().","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/new_bigpca_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal constructors and S3 methods for bigPCAcpp results — new_bigpca_result","text":"","code":"new_bigpca_result(result, backend)"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigalgebra.html","id":null,"dir":"Reference","previous_headings":"","what":"bigalgebra-backed PCA helpers — pca_bigalgebra","title":"bigalgebra-backed PCA helpers — pca_bigalgebra","text":"Variants PCA helpers stream results directly bigmemory::big.matrix objects, enabling file-backed workflows without materialising dense R matrices.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigalgebra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bigalgebra-backed PCA helpers — pca_bigalgebra","text":"","code":"pca_bigalgebra(   xpMat,   xpRotation = NULL,   center = TRUE,   scale = FALSE,   ncomp = -1L,   block_size = 1024L )  pca_scores_bigalgebra(   xpMat,   xpDest,   rotation,   center,   scale,   ncomp = -1L,   block_size = 1024L )  pca_variable_loadings_bigalgebra(xpRotation, sdev, xpDest)"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigalgebra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bigalgebra-backed PCA helpers — pca_bigalgebra","text":"xpRotation Optionally, either bigmemory::big.matrix external pointer referencing destination big.matrix receives rotation matrix. xpDest Either big.matrix external pointer referencing destination big.matrix stores computed quantity. xpLoadings pca_variable_contributions_bigalgebra(), loadings matrix supplied big.matrix external pointer.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigalgebra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bigalgebra-backed PCA helpers — pca_bigalgebra","text":"pca_bigalgebra(), bigpca object pca_bigmatrix() addition rotation_bigalgebra element referencing populated big.matrix xpRotation supplied. external pointer supplied xpDest, invisibly.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigalgebra.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"bigalgebra-backed PCA helpers — pca_bigalgebra","text":"pca_scores_bigalgebra(): Stream PCA scores destination big.matrix. pca_variable_loadings_bigalgebra(): Populate big.matrix objects derived variable diagnostics.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigalgebra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bigalgebra-backed PCA helpers — pca_bigalgebra","text":"","code":"set.seed(456) mat <- bigmemory::as.big.matrix(matrix(rnorm(30), nrow = 6)) rotation_store <- bigmemory::big.matrix(ncol(mat), ncol(mat), type = \"double\") pca_stream <- pca_bigalgebra(mat, xpRotation = rotation_store, ncomp = 2) #> Error: rotation big.matrix has incompatible dimensions score_store <- bigmemory::big.matrix(nrow(mat), 2, type = \"double\") pca_scores_bigalgebra(mat, score_store, pca_stream$rotation, pca_stream$center,     pca_stream$scale, ncomp = 2) #> Error: object 'pca_stream' not found"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal component analysis for bigmemory::big.matrix inputs — pca_bigmatrix","title":"Principal component analysis for bigmemory::big.matrix inputs — pca_bigmatrix","text":"Perform principal component analysis (PCA) directly bigmemory::big.matrix without copying data R memory. exported helpers mirror structure base R's prcomp() avoiding need materialise large matrices.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigmatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal component analysis for bigmemory::big.matrix inputs — pca_bigmatrix","text":"","code":"resolve_big_pointer(x, arg, allow_null = FALSE)  pca_scores_bigmatrix(   xpMat,   rotation,   center,   scale,   ncomp = -1L,   block_size = 1024L )  pca_variable_loadings(rotation, sdev)  pca_variable_correlations(rotation, sdev, column_sd)  pca_variable_contributions(loadings)  pca_individual_contributions(scores, sdev, total_weight = NA_real_)  pca_individual_cos2(scores)  pca_variable_cos2(correlations)  # S3 method for class 'bigpca' summary(object, ...)  # S3 method for class 'summary.bigpca' print(x, digits = max(3, getOption(\"digits\") - 3), ...)  # S3 method for class 'bigpca' plot(   x,   y,   type = c(\"scree\", \"contributions\", \"correlation_circle\", \"biplot\"),   max_components = 25L,   component = 1L,   top_n = 20L,   components = c(1L, 2L),   data = NULL,   draw = TRUE,   ... )"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigmatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal component analysis for bigmemory::big.matrix inputs — pca_bigmatrix","text":"x summary.bigpca object. arg Character string naming argument validated. Used construct informative error messages. allow_null Logical flag indicating whether NULL accepted argument. TRUE, NULL input returned unchanged. xpMat Either bigmemory::big.matrix external pointer mat@address references source big.matrix. rotation rotation matrix rotation element returned pca_bigmatrix(). center pca_scores_bigmatrix(), numeric vector column means (optional). scale pca_scores_bigmatrix(), numeric vector scaling factors (optional). Scaling requires center supplied. ncomp Number components retain. Use non-positive value keep components returned decomposition. block_size Number rows process per block streaming data BLAS kernels. Larger values improve throughput cost additional memory. sdev numeric vector component standard deviations, typically sdev element pca_bigmatrix(). column_sd numeric vector marginal standard deviation original variable. loadings numeric matrix result pca_variable_loadings(). scores pca_individual_contributions() pca_individual_cos2(), numeric matrix component scores rows correspond observations columns components. total_weight Optional positive scalar giving effective number observations use computing contributions. Defaults number rows scores. correlations pca_variable_cos2(), numeric matrix correlations variables components. object bigpca object created pca_bigmatrix(), pca_stream_bigmatrix(), related helpers. ... Additional arguments passed plotting helpers. digits Number significant digits display printing importance metrics. y Currently unused. type plot draw. Options include \"scree\" (variance explained), \"contributions\" (top contributing variables), \"correlation_circle\" (variable correlations selected components), \"biplot\" (joint display scores loadings). max_components Maximum number components display scree plots. component Component index highlight drawing contribution plots. top_n Number variables display contribution plots. components Length-two integer vector selecting components correlation circle biplot views. data Optional data source (matrix, data frame, bigmemory::big.matrix, external pointer) used compute scores biplots x$scores unavailable. draw Logical; FALSE, return data prepared selected plot instead drawing .","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigmatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal component analysis for bigmemory::big.matrix inputs — pca_bigmatrix","text":"pca_bigmatrix(), bigpca object mirroring prcomp result elements sdev, rotation, optional center scale vectors, column_sd, eigenvalues, explained_variance, cumulative_variance, sample covariance matrix. object participates S3 generics summary() plot(). numeric matrix scores rows corresponding observations columns retained components. numeric matrix containing variable loadings component. numeric matrix correlations variables components. numeric matrix entry represents contribution variable component. summary.bigpca(), summary.bigpca object containing component importance measures.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigmatrix.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Principal component analysis for bigmemory::big.matrix inputs — pca_bigmatrix","text":"pca_scores_bigmatrix(): Project observations principal component space streaming big.matrix. pca_variable_loadings(): Compute variable loadings (covariances original variables components). pca_variable_correlations(): Compute variable-component correlations given column standard deviations. pca_variable_contributions(): Derive relative contribution variable retained components. pca_individual_contributions(): Compute relative contribution individual observations component. pca_individual_cos2(): Compute squared cosine values measuring quality representation individual observations. pca_variable_cos2(): Compute squared cosine values measuring quality representation variables. summary(bigpca): Summarise component importance metrics bigpca result. print(summary.bigpca): Print component importance summary produced summary.bigpca(). plot(bigpca): Visualise PCA diagnostics scree, correlation circle, contribution, biplot displays.","code":""},{"path":[]},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigmatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal component analysis for bigmemory::big.matrix inputs — pca_bigmatrix","text":"","code":"set.seed(123) mat <- bigmemory::as.big.matrix(matrix(rnorm(40), nrow = 10)) pca <- pca_bigmatrix(mat, center = TRUE, scale = TRUE, ncomp = 3) scores <- pca_scores_bigmatrix(mat, pca$rotation, pca$center, pca$scale, ncomp = 3) loadings <- pca_variable_loadings(pca$rotation, pca$sdev) correlations <- pca_variable_correlations(pca$rotation, pca$sdev, pca$column_sd) contributions <- pca_variable_contributions(loadings) list(scores = scores, loadings = loadings, correlations = correlations,      contributions = contributions) #> $scores #>              [,1]        [,2]        [,3] #>  [1,]  0.54325339 -0.91493729 -0.41315014 #>  [2,] -0.77428157 -0.84150780  0.40023111 #>  [3,]  1.77362948  0.79996096  0.05039649 #>  [4,]  0.61761772  0.59591822 -0.57031347 #>  [5,]  0.23218256  0.95503144 -0.72268699 #>  [6,]  2.66813521 -0.45268284  0.33775240 #>  [7,] -0.08448606  0.81203899  1.15087152 #>  [8,] -2.43891736  0.54722825 -0.96050148 #>  [9,] -0.40827305 -1.59689839 -0.36789931 #> [10,] -2.12886032  0.09584844  1.09529988 #>  #> $loadings #>            [,1]       [,2]       [,3] #> [1,]  0.8567704  0.2711956  0.3439932 #> [2,]  0.7678169 -0.5050498  0.3324763 #> [3,] -0.7573969  0.3708264  0.5203357 #> [4,]  0.7581891  0.5754452 -0.2056261 #>  #> $correlations #>            [,1]       [,2]       [,3] #> [1,]  0.8982856  0.2843364  0.3606615 #> [2,]  0.7396557 -0.4865261  0.3202821 #> [3,] -0.8136972  0.3983915  0.5590143 #> [4,]  1.4378639  1.0913001 -0.3899587 #>  #> $contributions #>           [,1]       [,2]       [,3] #> [1,] 0.2969361 0.09224839 0.21836250 #> [2,] 0.2384786 0.31993524 0.20398568 #> [3,] 0.2320498 0.17247851 0.49962661 #> [4,] 0.2325354 0.41533786 0.07802521 #>"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA biplot helper — pca_plot_biplot","title":"PCA biplot helper — pca_plot_biplot","text":"Combines principal component scores variable loadings single scatter plot. helper accepts standard matrices bigmemory::big.matrix inputs, extracting requested component columns. draw = TRUE, function scales loadings match score ranges, draws optional axes, overlays loading arrows, labels observations requested.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA biplot helper — pca_plot_biplot","text":"","code":"pca_plot_biplot(   scores,   loadings,   components = c(1L, 2L),   draw = TRUE,   draw_axes = TRUE,   draw_arrows = TRUE,   label_points = FALSE,   ... )"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA biplot helper — pca_plot_biplot","text":"scores Matrix bigmemory::big.matrix containing principal component scores observations rows components columns. loadings Matrix bigmemory::big.matrix variable loadings whose columns correspond principal components. components Integer vector length two selecting components display. draw Logical; set FALSE return prepared data without plotting. draw_axes Logical; TRUE, horizontal vertical axes drawn origin. draw_arrows Logical; TRUE, loading arrows rendered. label_points Logical; TRUE, point labels derived row names drawn next scores. ... Additional graphical parameters passed graphics::plot().","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA biplot helper — pca_plot_biplot","text":"list containing selected components, extracted scores, original loadings, scaled loadings (loadings_scaled), applied scale_factor. list returned invisibly. draw = TRUE, biplot produced using base graphics.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_contributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot variable contributions — pca_plot_contributions","title":"Plot variable contributions — pca_plot_contributions","text":"Highlights variables contribute selected principal component. helper works dense matrices returned pca_variable_contributions() well bigmemory::big.matrix objects via sampling.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_contributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot variable contributions — pca_plot_contributions","text":"","code":"pca_plot_contributions(   contributions,   component = 1L,   top_n = 20L,   draw = TRUE,   ... )"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_contributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot variable contributions — pca_plot_contributions","text":"contributions Contribution matrix rows correspond variables columns components. component Integer index component visualise. top_n Number variables largest absolute contribution include bar plot. draw Logical; set FALSE skip plotting. ... Additional arguments passed barplot().","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_contributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot variable contributions — pca_plot_contributions","text":"data frame variables contributions returned invisibly. draw = TRUE, bar plot top variables produced.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_correlation_circle.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a PCA correlation circle — pca_plot_correlation_circle","title":"Plot a PCA correlation circle — pca_plot_correlation_circle","text":"Visualises correlation variable pair principal components. variables projected onto unit circle, points near perimeter indicate strong correlation selected components.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_correlation_circle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a PCA correlation circle — pca_plot_correlation_circle","text":"","code":"pca_plot_correlation_circle(   correlations,   components = c(1L, 2L),   labels = NULL,   draw = TRUE,   ... )"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_correlation_circle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a PCA correlation circle — pca_plot_correlation_circle","text":"correlations Matrix bigmemory::big.matrix containing variable correlations, typically produced pca_variable_correlations(). components Length-two integer vector specifying principal components display. labels Optional character vector specifying labels display variable. NULL, row names correlations used available. draw Logical; set FALSE return prepared coordinates without plotting. ... Additional graphical parameters passed graphics::plot().","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_correlation_circle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a PCA correlation circle — pca_plot_correlation_circle","text":"data frame variable, PCx, PCy columns representing projected correlations, PCx/PCy correspond requested component indices. data frame returned invisibly.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sampled PCA scores — pca_plot_scores","title":"Plot sampled PCA scores — pca_plot_scores","text":"Streams subset observations PCA rotation plots scores requested components. Sampling keeps drawn subset small graphics remain interpretable even source big matrix contains millions rows.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sampled PCA scores — pca_plot_scores","text":"","code":"pca_plot_scores(   x,   rotation,   center = numeric(),   scale = numeric(),   components = c(1L, 2L),   max_points = 5000L,   sample = c(\"uniform\", \"head\"),   seed = NULL,   draw = TRUE,   ... )"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sampled PCA scores — pca_plot_scores","text":"x Either bigmemory::big.matrix, standard matrix, data frame. rotation rotation matrix pca_result$rotation. center Optional centering vector. Use numeric() centering applied. scale Optional scaling vector. Use numeric() scaling applied. components Length-two integer vector selecting principal components display. max_points Maximum number observations sample plot. sample Strategy selecting rows. \"uniform\" draws random sample without replacement, whereas \"head\" takes first max_points rows. seed Optional seed make sampling reproducible. draw Logical; set FALSE skip plotting return sampled scores. ... Additional graphical parameters forwarded plot().","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot sampled PCA scores — pca_plot_scores","text":"list containing indices (sampled row indices) scores (corresponding score matrix) returned invisibly. draw = TRUE scatter plot produced.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scree.html","id":null,"dir":"Reference","previous_headings":"","what":"Scree plot for principal component importance — pca_plot_scree","title":"Scree plot for principal component importance — pca_plot_scree","text":"Displays proportion variance explained leading principal components. function caps number displayed components keep visualization legible high-dimensional problems.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scree plot for principal component importance — pca_plot_scree","text":"","code":"pca_plot_scree(   pca_result,   max_components = 25L,   cumulative = TRUE,   draw = TRUE,   ... )"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scree plot for principal component importance — pca_plot_scree","text":"pca_result list created pca_bigmatrix() pca_stream_bigmatrix() containing standard deviation explained variance elements. max_components Maximum number components display. Defaults 25 available number components, whichever smaller. cumulative Logical flag indicating whether overlay cumulative explained variance line. draw Logical; set FALSE return prepared data without drawing plot (useful testing). ... Additional parameters passed plot().","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scree plot for principal component importance — pca_plot_scree","text":"list component, explained, cumulative vectors returned invisibly. draw = TRUE, function produces scree plot using base graphics.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot PCA diagnostics for big data workflows — pca_plots","title":"Plot PCA diagnostics for big data workflows — pca_plots","text":"helpers visualise results returned pca_bigmatrix() companions without requiring users materialise dense intermediate structures. plotting function optionally samples inputs default output remains responsive even underlying big matrix spans millions observations.","code":""},{"path":[]},{"path":"https://fbertran.github.io/bigPCA/reference/pca_robust.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust principal component analysis — pca_robust","title":"Robust principal component analysis — pca_robust","text":"Compute principal component analysis (PCA) using robust measures location scale extreme observations reduced influence resulting components. implementation centres variable median , requested, scales median absolute deviation (MAD) performing iteratively reweighted singular value decomposition -weights observations unusually large reconstruction errors.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_robust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust principal component analysis — pca_robust","text":"","code":"pca_robust(x, center = TRUE, scale = FALSE, ncomp = NULL)"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_robust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust principal component analysis — pca_robust","text":"x numeric matrix, data frame, object coercible numeric matrix. Missing values supported. center Logical; variables centred median applying PCA? scale Logical; TRUE, variables scaled MAD centring. Scaling requires center = TRUE. ncomp Number components retain. Use NULL non-positive value keep components returned decomposition.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_robust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust principal component analysis — pca_robust","text":"bigpca object mirroring structure pca_bigmatrix() robust estimates location, scale, variance metrics.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_robust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Robust principal component analysis — pca_robust","text":"","code":"set.seed(42) x <- matrix(rnorm(50), nrow = 10) x[1, 1] <- 25  # outlier robust <- pca_robust(x, ncomp = 2) robust$sdev #> [1] 1.090016 1.444730"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_spca.html","id":null,"dir":"Reference","previous_headings":"","what":"Scalable principal component analysis via streaming power iterations — pca_spca","title":"Scalable principal component analysis via streaming power iterations — pca_spca","text":"Implements scalable PCA (sPCA) procedure Elgamal et al. (2015), uses block power iterations approximate leading principal components streaming data manageable chunks. algorithm requires matrix-vector products, allowing large matrices processed without materialising full cross-product memory. Implements scalable PCA (sPCA) procedure Elgamal et al. (2015), uses block power iterations approximate leading principal components streaming data manageable chunks. algorithm requires matrix-vector products, allowing large matrices processed without materialising full cross-product memory. Implements scalable PCA (sPCA) procedure Elgamal et al. (2015), uses block power iterations approximate leading principal components streaming data manageable chunks. algorithm requires matrix-vector products, allowing large matrices processed without materialising full cross-product memory.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_spca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scalable principal component analysis via streaming power iterations — pca_spca","text":"","code":"pca_spca(   x,   ncomp = NULL,   center = TRUE,   scale = FALSE,   block_size = 2048L,   max_iter = 50L,   tol = 1e-04,   seed = NULL,   return_scores = FALSE,   verbose = FALSE )  pca_spca(   x,   ncomp = NULL,   center = TRUE,   scale = FALSE,   block_size = 2048L,   max_iter = 50L,   tol = 1e-04,   seed = NULL,   return_scores = FALSE,   verbose = FALSE )  pca_spca_R(   x,   ncomp = NULL,   center = TRUE,   scale = FALSE,   block_size = 2048L,   max_iter = 50L,   tol = 1e-04,   seed = NULL,   return_scores = FALSE,   verbose = FALSE )  pca_spca(   x,   ncomp = NULL,   center = TRUE,   scale = FALSE,   block_size = 2048L,   max_iter = 50L,   tol = 1e-04,   seed = NULL,   return_scores = FALSE,   verbose = FALSE )  pca_spca_R(   x,   ncomp = NULL,   center = TRUE,   scale = FALSE,   block_size = 2048L,   max_iter = 50L,   tol = 1e-04,   seed = NULL,   return_scores = FALSE,   verbose = FALSE )"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_spca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scalable principal component analysis via streaming power iterations — pca_spca","text":"x numeric matrix, data frame, bigmemory::big.matrix, external pointer referencing big.matrix. input processed row-wise blocks large matrices can analysed without creating dense copies R memory. ncomp Number principal components retain. Use NULL non-positive value keep min(nrow(x), ncol(x)) components. center Logical; column means subtracted performing PCA? scale Logical; TRUE, columns scaled unit variance centring. Scaling requires center = TRUE. block_size Number rows stream per block computing column statistics matrix-vector products. max_iter Maximum number block power iterations. tol Convergence tolerance applied Frobenius norm difference successive subspace projectors. seed Optional integer seed used initialise random starting basis. return_scores Logical; TRUE, principal component scores computed final streaming pass data. verbose Logical; TRUE, diagnostic messages describing iteration progress emitted.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_spca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scalable principal component analysis via streaming power iterations — pca_spca","text":"bigpca object containing approximate PCA solution structure pca_bigmatrix(). result includes component standard deviations, rotation/loadings, optional scores, column statistics, variance summaries. Additional metadata stored attr(result, \"iterations\") (number iterations performed), attr(result, \"tolerance\") (requested tolerance), attr(result, \"converged\") (logical convergence flag). bigpca object containing approximate PCA solution structure pca_bigmatrix(). result includes component standard deviations, rotation/loadings, optional scores, column statistics, variance summaries. Additional metadata stored attr(result, \"iterations\") (number iterations performed), attr(result, \"tolerance\") (requested tolerance), attr(result, \"converged\") (logical convergence flag). bigpca object containing approximate PCA solution structure pca_bigmatrix(). result includes component standard deviations, rotation/loadings, optional scores, column statistics, variance summaries. Additional metadata stored attr(result, \"iterations\") (number iterations performed), attr(result, \"tolerance\") (requested tolerance), attr(result, \"converged\") (logical convergence flag).","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_spca.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Scalable principal component analysis via streaming power iterations — pca_spca","text":"Tarek Elgamal, Maysam Yabandeh, Ashraf Aboulnaga, Waleed Mustafa, Mohamed Hefeeda (2015). sPCA: Scalable Principal Component Analysis Big Data Distributed Platforms. Proceedings 2015 ACM SIGMOD International Conference Management Data. doi:10.1145/2723372.2751520. Tarek Elgamal, Maysam Yabandeh, Ashraf Aboulnaga, Waleed Mustafa, Mohamed Hefeeda (2015). sPCA: Scalable Principal Component Analysis Big Data Distributed Platforms. Proceedings 2015 ACM SIGMOD International Conference Management Data. doi:10.1145/2723372.2751520. Tarek Elgamal, Maysam Yabandeh, Ashraf Aboulnaga, Waleed Mustafa, Mohamed Hefeeda (2015). sPCA: Scalable Principal Component Analysis Big Data Distributed Platforms. Proceedings 2015 ACM SIGMOD International Conference Management Data. doi:10.1145/2723372.2751520.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_stream_bigmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Streaming big.matrix PCA helpers — pca_stream_bigmatrix","title":"Streaming big.matrix PCA helpers — pca_stream_bigmatrix","text":"Variants PCA helpers stream results directly bigmemory::big.matrix objects, enabling file-backed workflows without materialising dense R matrices.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_stream_bigmatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Streaming big.matrix PCA helpers — pca_stream_bigmatrix","text":"","code":"pca_spca_stream_bigmatrix(   xpMat,   xpRotation = NULL,   center = TRUE,   scale = FALSE,   ncomp = -1L,   block_size = 2048L,   max_iter = 50L,   tol = 1e-04,   seed = NULL,   return_scores = FALSE,   verbose = FALSE )  pca_scores_stream_bigmatrix(   xpMat,   xpDest,   rotation,   center,   scale,   ncomp = -1L,   block_size = 1024L )  pca_variable_loadings_stream_bigmatrix(xpRotation, sdev, xpDest)  pca_variable_correlations_stream_bigmatrix(xpRotation, sdev, column_sd, xpDest)  pca_variable_contributions_stream_bigmatrix(xpLoadings, xpDest)"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_stream_bigmatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Streaming big.matrix PCA helpers — pca_stream_bigmatrix","text":"xpMat Either bigmemory::big.matrix external pointer mat@address references source big.matrix. xpRotation pca_variable_correlations_stream_bigmatrix(), bigmemory::big.matrix external pointer containing rotation matrix stream . center pca_scores_bigmatrix(), numeric vector column means (optional). scale pca_scores_bigmatrix(), numeric vector scaling factors (optional). Scaling requires center supplied. ncomp Number components retain. Use non-positive value keep components returned decomposition. block_size Number rows process per block streaming data BLAS kernels. Larger values improve throughput cost additional memory. max_iter Maximum number block power iterations. tol Convergence tolerance applied Frobenius norm difference successive subspace projectors. seed Optional integer seed used initialise random starting basis. return_scores Logical; TRUE, principal component scores computed final streaming pass data. verbose Logical; TRUE, diagnostic messages describing iteration progress emitted. xpDest Either big.matrix external pointer referencing destination big.matrix stores computed quantity. rotation rotation matrix rotation element returned pca_bigmatrix(). sdev numeric vector component standard deviations, typically sdev element pca_bigmatrix(). column_sd numeric vector variable standard deviations used scale correlations. xpLoadings pca_variable_contributions_stream_bigmatrix(), loadings matrix supplied big.matrix external pointer.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_stream_bigmatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Streaming big.matrix PCA helpers — pca_stream_bigmatrix","text":"pca_stream_bigmatrix(), bigpca object pca_bigmatrix() addition rotation_stream_bigmatrix element referencing populated big.matrix xpRotation supplied. pca_spca_stream_bigmatrix(), scalable PCA structure pca_spca() optional pointer populated provided. external pointer supplied xpDest, invisibly.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_stream_bigmatrix.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Streaming big.matrix PCA helpers — pca_stream_bigmatrix","text":"pca_scores_stream_bigmatrix(): Stream PCA scores destination big.matrix. pca_variable_loadings_stream_bigmatrix(): Populate big.matrix objects derived variable diagnostics. pca_variable_correlations_stream_bigmatrix(): Stream variable correlations destination big.matrix. pca_variable_contributions_stream_bigmatrix(): Stream variable contributions destination big.matrix.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_stream_bigmatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Streaming big.matrix PCA helpers — pca_stream_bigmatrix","text":"","code":"set.seed(456) mat <- bigmemory::as.big.matrix(matrix(rnorm(30), nrow = 6)) ncomp <- 2 rotation_store <- bigmemory::big.matrix(ncol(mat), ncomp, type = \"double\") pca_stream <- pca_stream_bigmatrix(mat, xpRotation = rotation_store, ncomp = ncomp) score_store <- bigmemory::big.matrix(nrow(mat), ncomp, type = \"double\") pca_scores_stream_bigmatrix(     mat,     score_store,     pca_stream$rotation,     pca_stream$center,     pca_stream$scale,     ncomp = ncomp ) #> <pointer: 0x11b3d1010> loadings_store <- bigmemory::big.matrix(ncol(mat), ncomp, type = \"double\") pca_variable_loadings_stream_bigmatrix(     pca_stream$rotation_stream_bigmatrix,     pca_stream$sdev,     loadings_store ) #> <pointer: 0x11eec08d0> correlation_store <- bigmemory::big.matrix(ncol(mat), ncomp, type = \"double\") pca_variable_correlations_stream_bigmatrix(     pca_stream$rotation_stream_bigmatrix,     pca_stream$sdev,     pca_stream$column_sd,     correlation_store ) #> <pointer: 0x148038260> contribution_store <- bigmemory::big.matrix(ncol(mat), ncomp, type = \"double\") pca_variable_contributions_stream_bigmatrix(     loadings_store,     contribution_store ) #> <pointer: 0x13984bbb0>"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_supplementary_individuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Supplementary individual diagnostics — pca_supplementary_individuals","title":"Supplementary individual diagnostics — pca_supplementary_individuals","text":"Compute principal component scores quality metrics supplementary individuals (rows) projected existing PCA solution.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_supplementary_individuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Supplementary individual diagnostics — pca_supplementary_individuals","text":"","code":"pca_supplementary_individuals(   data,   rotation,   sdev,   center = NULL,   scale = NULL,   total_weight = NA_real_ )"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_supplementary_individuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Supplementary individual diagnostics — pca_supplementary_individuals","text":"data Matrix-like object whose rows correspond supplementary individuals columns original variables. rotation Rotation matrix PCA model (e.g. rotation element bigpca result). sdev Numeric vector component standard deviations associated rotation. center Optional numeric vector giving centring applied variable fitting PCA. Defaults zero centring. scale Optional numeric vector describing scaling applied variable fitting PCA. NULL, scaling applied. total_weight Optional positive scalar passed pca_individual_contributions() computing contributions. left NA (default), resulting contributions component normalised sum one across supplementary individuals. Supplying value bypasses normalisation delegates scaling pca_individual_contributions().","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_supplementary_individuals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Supplementary individual diagnostics — pca_supplementary_individuals","text":"list elements scores, contributions, cos2.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_supplementary_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Supplementary variable diagnostics — pca_supplementary_variables","title":"Supplementary variable diagnostics — pca_supplementary_variables","text":"Compute loadings, correlations, contributions, cos^2 values supplementary variables (columns) given component scores active individuals.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_supplementary_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Supplementary variable diagnostics — pca_supplementary_variables","text":"","code":"pca_supplementary_variables(data, scores, sdev, center = NULL)"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_supplementary_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Supplementary variable diagnostics — pca_supplementary_variables","text":"data Matrix-like object whose columns correspond supplementary variables measured active individuals. scores Numeric matrix component scores active individuals. sdev Numeric vector component standard deviations associated scores. center Optional numeric vector specifying centring apply supplementary variable. NULL, column means data used.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_supplementary_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Supplementary variable diagnostics — pca_supplementary_variables","text":"list elements loadings, correlations, contributions, cos2.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/prepare_svd_robust_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare iteratively reweighted singular value decomposition — prepare_svd_robust_input","title":"Prepare iteratively reweighted singular value decomposition — prepare_svd_robust_input","text":"Internal helper used pca_robust() compute singular value decomposition less sensitive individual rows extreme values. routine alternates computing SVD row-weighted matrix updating weights via Huber-type scheme based reconstruction residuals.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/prepare_svd_robust_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare iteratively reweighted singular value decomposition — prepare_svd_robust_input","text":"","code":"prepare_svd_robust_input(x, ncomp, max_iter, tol, huber_k)"},{"path":"https://fbertran.github.io/bigPCA/reference/prepare_svd_robust_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare iteratively reweighted singular value decomposition — prepare_svd_robust_input","text":"x Numeric matrix decomposition computed. ncomp Number leading components retain. max_iter Maximum number reweighting iterations. tol Convergence tolerance applied successive changes row weights singular values. huber_k Tuning constant controlling aggressiveness Huber weight function. Larger values -weight fewer observations.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/prepare_svd_robust_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare iteratively reweighted singular value decomposition — prepare_svd_robust_input","text":"list containing x, n, p, ncomp, max_iter, tol huber_k.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/svd_bigmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Singular value decomposition for bigmemory::big.matrix inputs — svd_bigmatrix","title":"Singular value decomposition for bigmemory::big.matrix inputs — svd_bigmatrix","text":"Compute singular value decomposition (SVD) bigmemory::big.matrix without materialising base R matrix. Blocks rows streamed BLAS LAPACK invoked even moderately large matrices can decomposed efficiently.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/svd_bigmatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Singular value decomposition for bigmemory::big.matrix inputs — svd_bigmatrix","text":"","code":"svd_bigmatrix(   xpMat,   nu = -1L,   nv = -1L,   block_size = 1024L,   method = c(\"dgesdd\", \"dgesvd\") )"},{"path":"https://fbertran.github.io/bigPCA/reference/svd_bigmatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Singular value decomposition for bigmemory::big.matrix inputs — svd_bigmatrix","text":"xpMat Either bigmemory::big.matrix external pointer mat@address references source big.matrix. nu Number left singular vectors return. Use negative value request default min(nrow, ncol) vectors zero skip returning u entirely. nv Number right singular vectors return. Use negative value request default min(nrow, ncol) vectors zero skip returning v entirely. block_size Number rows process per block streaming data BLAS kernels. Larger values can improve throughput cost additional temporary memory. method LAPACK backend used compute decomposition. default uses divide--conquer routine dgesdd falls back dgesvd required.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/svd_bigmatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Singular value decomposition for bigmemory::big.matrix inputs — svd_bigmatrix","text":"list components u, d, v analogous base R's svd() output. nu nv zero corresponding matrix zero columns.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/svd_bigmatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Singular value decomposition for bigmemory::big.matrix inputs — svd_bigmatrix","text":"","code":"set.seed(42) mat <- bigmemory::as.big.matrix(matrix(rnorm(20), nrow = 5)) svd_res <- svd_bigmatrix(mat, nu = 2, nv = 2) svd_res$d #> [1] 4.319302 3.283675 1.685888 1.091984"},{"path":"https://fbertran.github.io/bigPCA/reference/svd_robust.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust singular value decomposition (C++ backend) — svd_robust","title":"Robust singular value decomposition (C++ backend) — svd_robust","text":"Compute iteratively reweighted SVD using high-performance C++ implementation. interface mirrors svd_robust_R() delegating heavy lifting compiled code.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/svd_robust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust singular value decomposition (C++ backend) — svd_robust","text":"","code":"svd_robust(   x,   ncomp,   max_iter = 25L,   tol = sqrt(.Machine$double.eps),   huber_k = 1.345 )"},{"path":"https://fbertran.github.io/bigPCA/reference/svd_robust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust singular value decomposition (C++ backend) — svd_robust","text":"x Numeric matrix decomposition computed. ncomp Number leading components retain. max_iter Maximum number reweighting iterations. tol Convergence tolerance applied successive changes row weights singular values. huber_k Tuning constant controlling aggressiveness Huber weight function. Larger values -weight fewer observations.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/svd_robust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust singular value decomposition (C++ backend) — svd_robust","text":"list containing left right singular vectors (u v), singular values (d), final row weights (weights), number iterations required convergence (iterations).","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/svd_robust_R.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteratively reweighted singular value decomposition — svd_robust_R","title":"Iteratively reweighted singular value decomposition — svd_robust_R","text":"Internal helper used pca_robust() compute singular value decomposition less sensitive individual rows extreme values. routine alternates computing SVD row-weighted matrix updating weights via Huber-type scheme based reconstruction residuals.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/svd_robust_R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteratively reweighted singular value decomposition — svd_robust_R","text":"","code":"svd_robust_R(   x,   ncomp,   max_iter = 25L,   tol = sqrt(.Machine$double.eps),   huber_k = 1.345 )"},{"path":"https://fbertran.github.io/bigPCA/reference/svd_robust_R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteratively reweighted singular value decomposition — svd_robust_R","text":"x Numeric matrix decomposition computed. ncomp Number leading components retain. max_iter Maximum number reweighting iterations. tol Convergence tolerance applied successive changes row weights singular values. huber_k Tuning constant controlling aggressiveness Huber weight function. Larger values -weight fewer observations.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/svd_robust_R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteratively reweighted singular value decomposition — svd_robust_R","text":"list containing left right singular vectors (u v), singular values (d), final row weights (weights), number iterations required convergence (iterations). structure mirrors base R's base::svd() output additional metadata.","code":""}]
