[{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Scaling Principal Component Analysis with bigPCA","text":"bigPCA package provides principal component analysis (PCA) routines operate directly bigmemory::big.matrix objects. vignette walks complete analysis workflow compares results reference implementation base R’s prcomp() demonstrate numerical agreement. use classic iris measurement data small, -memory example. Even larger data sets stored disk, workflow identical big.matrix descriptor created.","code":""},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"preparing-a-big-matrix","dir":"Articles","previous_headings":"","what":"Preparing a big.matrix","title":"Scaling Principal Component Analysis with bigPCA","text":"Every bigPCA entry point accepts big.matrix object directly (, compatibility, still works external pointers via @address slot), allowing analyses without copying data regular R matrices.","code":"library(bigmemory) library(bigPCA)  iris_mat <- as.matrix(iris[, 1:4]) big_iris <- as.big.matrix(iris_mat, type = \"double\")"},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"running-pca-with-bigpca","dir":"Articles","previous_headings":"","what":"Running PCA with bigPCA","title":"Scaling Principal Component Analysis with bigPCA","text":"returned list mirrors structure prcomp object: singular values (sdev), rotation matrix (rotation), optional centering scaling vectors, additional diagnostics including covariance matrix explained variance ratios.","code":"big_pca <- pca_bigmatrix(   xpMat = big_iris,   center = TRUE,   scale = TRUE,   ncomp = 4L,   block_size = 128L ) str(big_pca) #> List of 10 #>  $ sdev               : num [1:4] 1.708 0.956 0.383 0.144 #>  $ rotation           : num [1:4, 1:4] 0.521 -0.269 0.58 0.565 0.377 ... #>  $ center             : num [1:4] 5.84 3.06 3.76 1.2 #>  $ scale              : num [1:4] 0.828 0.436 1.765 0.762 #>  $ column_sd          : num [1:4] 0.828 0.436 1.765 0.762 #>  $ eigenvalues        : num [1:4] 2.9185 0.914 0.1468 0.0207 #>  $ explained_variance : num [1:4] 0.72962 0.22851 0.03669 0.00518 #>  $ cumulative_variance: num [1:4] 0.73 0.958 0.995 1 #>  $ covariance         : num [1:4, 1:4] 1 -0.118 0.872 0.818 -0.118 ... #>  $ nobs               : num 150 #>  - attr(*, \"backend\")= chr \"bigmemory\" #>  - attr(*, \"class\")= chr [1:3] \"bigpca_bigmemory\" \"bigpca\" \"list\""},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"comparing-against-prcomp","dir":"Articles","previous_headings":"","what":"Comparing against prcomp","title":"Scaling Principal Component Analysis with bigPCA","text":"maximum absolute deviations base implementation bigPCA negligible (order numerical precision), showing --core algorithm faithfully reproduces components scores.","code":"base_pca <- prcomp(iris_mat, center = TRUE, scale. = TRUE)  align_columns <- function(reference, target) {   aligned <- target   cols <- min(ncol(reference), ncol(target))   for (j in seq_len(cols)) {     ref <- reference[, j]     tgt <- target[, j]     if (sum((ref - tgt)^2) > sum((ref + tgt)^2)) {       aligned[, j] <- -tgt     }   }   aligned }  rotation_aligned <- align_columns(base_pca$rotation, big_pca$rotation) max_rotation_error <- max(abs(rotation_aligned - base_pca$rotation)) max_sdev_error <- max(abs(big_pca$sdev - base_pca$sdev))  big_scores <- pca_scores_bigmatrix(   xpMat = big_iris,   rotation = big_pca$rotation,   center = big_pca$center,   scale = big_pca$scale,   block_size = 128L )  scores_aligned <- align_columns(base_pca$x, big_scores) max_score_error <- max(abs(scores_aligned - base_pca$x))  c(   rotation = max_rotation_error,   sdev = max_sdev_error,   scores = max_score_error ) #>     rotation         sdev       scores  #> 3.441691e-15 1.110223e-15 7.993606e-15"},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"variable-relationships","dir":"Articles","previous_headings":"","what":"Variable relationships","title":"Scaling Principal Component Analysis with bigPCA","text":"exported helpers expose common PCA diagnostics without requiring original data matrix memory. Loadings match scaled rotation matrix, correlations rescale loadings back onto original variable standard deviations, contributions report relative importance variable within component.","code":"loadings <- pca_variable_loadings(big_pca$rotation, big_pca$sdev) correlations <- pca_variable_correlations(   big_pca$rotation,   big_pca$sdev,   big_pca$column_sd ) contributions <- pca_variable_contributions(loadings)  head(loadings) #>            [,1]       [,2]        [,3]        [,4] #> [1,]  0.8901688 0.36082989  0.27565767 -0.03760602 #> [2,] -0.4601427 0.88271627 -0.09361987  0.01777631 #> [3,]  0.9915552 0.02341519 -0.05444699  0.11534978 #> [4,]  0.9649790 0.06399985 -0.24298265 -0.07535950 head(correlations) #>            [,1]       [,2]        [,3]        [,4] #> [1,]  1.0749972 0.43575009  0.33289330 -0.04541427 #> [2,] -1.0556969 2.02519970 -0.21479035  0.04078385 #> [3,]  0.5616927 0.01326415 -0.03084294  0.06534294 #> [4,]  1.2659817 0.08396311 -0.31877545 -0.09886615 head(contributions) #>            [,1]         [,2]       [,3]       [,4] #> [1,] 0.27150969 0.1424440565 0.51777574 0.06827052 #> [2,] 0.07254804 0.8524748749 0.05972245 0.01525463 #> [3,] 0.33687936 0.0005998389 0.02019990 0.64232089 #> [4,] 0.31906291 0.0044812296 0.40230191 0.27415396"},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"visualising-pca-results","dir":"Articles","previous_headings":"","what":"Visualising PCA results","title":"Scaling Principal Component Analysis with bigPCA","text":"companion plotting helpers make straightforward inspect components returned bigPCA. Scree plot variance explained component. scree plot summarises much variance component explains makes easy identify natural cutoffs. Scores first two principal components. Score plots provide quick way compare sample relationships using requested principal components without materialising full score matrix.","code":"pca_plot_scree(big_pca) pca_plot_scores(   big_iris,   rotation = big_pca$rotation,   center = big_pca$center,   scale = big_pca$scale,   max_points = nrow(big_iris),   sample = \"head\" )"},{"path":"https://fbertran.github.io/bigPCA/articles/bigPCA.html","id":"next-steps-for-larger-data","dir":"Articles","previous_headings":"","what":"Next steps for larger data","title":"Scaling Principal Component Analysis with bigPCA","text":"-disk matrices created filebacked.big.matrix(), pass descriptor pointer pca_bigmatrix() algorithm stream data blocks, keeping memory usage bounded. Component scores can likewise generated batches using pca_scores_bigalgebra(). scores stored disk, can sampled plotted just like -memory workflow: Scores streamed file-backed big.matrix. building blocks, bigPCA enables analyses match accuracy -memory PCA workflows scaling data sets exceed RAM.","code":"library(bigmemory) library(bigPCA)  path <- tempfile(fileext = \".bin\") desc <- paste0(path, \".desc\")  bm <- filebacked.big.matrix(   nrow = nrow(iris_mat),   ncol = ncol(iris_mat),   type = \"double\",   backingfile = basename(path),   backingpath = dirname(path),   descriptorfile = basename(desc) )  bm[,] <- iris_mat  pca <- pca_bigalgebra(bm, center = TRUE, scale = TRUE, ncomp = 4) scores <- filebacked.big.matrix(   nrow = nrow(bm),   ncol = ncol(pca$rotation),   type = \"double\",   backingfile = \"scores.bin\",   backingpath = dirname(path),   descriptorfile = \"scores.desc\" )  pca_scores_bigalgebra(   bm,   scores,   pca$rotation,   center = pca$center,   scale = pca$scale ) #> <pointer: 0x1496a2560> pca_plot_scores(   bm,   rotation = pca$rotation,   center = pca$center,   scale = pca$scale,   components = c(1L, 2L),   max_points = nrow(bm),   sample = \"head\" ) library(bigmemory) library(bigPCA)  path <- tempfile(fileext = \".bin\") desc <- paste0(path, \".desc\")  bm <- filebacked.big.matrix(   nrow = 5000,   ncol = 50,   type = \"double\",   backingfile = basename(path),   backingpath = dirname(path),   descriptorfile = basename(desc) )  pca <- pca_bigmatrix(bm, center = TRUE, scale = TRUE, ncomp = 5) scores <- filebacked.big.matrix(   nrow = nrow(bm),   ncol = ncol(pca$rotation),   type = \"double\",   backingfile = \"scores.bin\",   backingpath = dirname(path),   descriptorfile = \"scores.desc\" )  pca_scores_bigmatrix(   bm,   pca$rotation,   scores,   center = pca$center,   scale = pca$scale )"},{"path":"https://fbertran.github.io/bigPCA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Frederic Bertrand. Author, maintainer.","code":""},{"path":"https://fbertran.github.io/bigPCA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frédéric Bertrand (2025). Principal Component Analysis bigmemory Matrices, R package version 0.1.0. doi:10.32614/CRAN.package.bigPCA.","code":"@Manual{,   title = {Principal Component Analysis for bigmemory Matrices},   author = {Frederic Bertrand},   year = {2025},   note = {R package version 0.1.0},   url = {https://CRAN.R-project.org/package=bigPCA},   doi = {10.32614/CRAN.package.bigPCA}, }"},{"path":[]},{"path":[]},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"frédéric-bertrand","dir":"","previous_headings":"","what":"Frédéric Bertrand","title":"Principal Component Analysis for bigmemory Matrices","text":"bigPCA package provides high performance principal component analysis (PCA) routines bigmemory::big.matrix objects. package streams data BLAS LAPACK kernels large matrices can analysed without first copying native R matrices. also includes helpers export PCA diagnostics scores, loadings, correlations, contributions file-backed big.matrix allocations suitable downstream analysis pipelines. bigPCA exposes two complementary backends: bigmemory – operates directly -memory file-backed big.matrix objects using bigmemory C++ API. bigalgebra – writes results bigalgebra matrices large studies can keep intermediate artifacts --memory benefiting native BLAS/LAPACK performance. workflows make possible analyse data sets exceed available RAM keeping numerical stability double-precision accumulation LAPACK eigen decompositions.","code":""},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Principal Component Analysis for bigmemory Matrices","text":"can install development version bigPCA GitHub : prefer local source install, clone repository run: workflows rely bigalgebra back-end, ensure package installed:","code":"# install.packages(\"devtools\") devtools::install_github(\"fbertran/bigPCA\") R CMD build bigPCA R CMD INSTALL bigPCA_0.0.1.tar.gz install.packages(\"bigalgebra\")"},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"options","dir":"","previous_headings":"","what":"Options","title":"Principal Component Analysis for bigmemory Matrices","text":"package defines several options control numerical tolerances workspace allocation. prefixed bigPCA. include: options can changed options() runtime. example, options(bigPCA.block_size = 5000L) increases streaming block size.","code":""},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Principal Component Analysis for bigmemory Matrices","text":"examples demonstrate bigmemory workflow compare results base R’s prcomp() implementation. stream diagnostics bigalgebra matrices, use corresponding helper functions:","code":"library(bigmemory) library(bigPCA)  # Allocate a 1,000 x 25 big.matrix with simulated values n <- 1000 p <- 25 bm <- bigmemory::big.matrix(n, p, type = \"double\") bm[,] <- matrix(rnorm(n * p), nrow = n)  # Run PCA and extract eigenvalues and rotation res <- pca_bigmatrix(bm, center = TRUE, scale. = TRUE) res$importance res$rotation[1:5, 1:3]  # Generate PCA scores in bigmemory-backed storage scores <- bigmemory::filebacked.big.matrix(n, ncol = 3, type = \"double\") pca_scores_bigalgebra(   bm,   scores,   res$rotation[, 1:3],   center = res$center,   scale = res$scale ) scores[1:5, ]  # Compare with prcomp() pr <- prcomp(bm[], center = TRUE, scale. = TRUE) all.equal(unclass(pr$rotation)[, 1:3], res$rotation[, 1:3], tolerance = 1e-6) library(bigmemory) library(bigalgebra) library(bigPCA)  n <- 1000 p <- 25 bm <- bigmemory::filebacked.big.matrix(n, p, type = \"double\") bm[,] <- matrix(rnorm(n * p), nrow = n)  res <- pca_bigmatrix(bm, center = TRUE, scale. = FALSE)  rotation <- bigmemory::big.matrix(nrow = p, ncol = p) loadings <- bigmemory::big.matrix(nrow = p, ncol = p) correlations <- bigmemory::big.matrix(nrow = p, ncol = p) contrib <- bigmemory::big.matrix(nrow = p, ncol = p)  pca_rotation_bigalgebra(res$rotation, rotation) pca_loadings_bigalgebra(res$rotation, res$importance[2, ], loadings) pca_correlations_bigalgebra(res$rotation, res$importance[1, ], correlations) pca_contributions_bigalgebra(res$rotation, contrib)"},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Principal Component Analysis for bigmemory Matrices","text":"use bigPCA academic work, please cite: Bertrand F. (2025). bigPCA: Principal Component Analysis bigmemory Matrices.","code":""},{"path":"https://fbertran.github.io/bigPCA/index.html","id":"maintainer","dir":"","previous_headings":"","what":"Maintainer","title":"Principal Component Analysis for bigmemory Matrices","text":"Maintainer: Frédéric Bertrand frederic.bertrand@lecnam.net questions, bug reports, contributions, please open issue GitHub.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/bigPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"bigPCA: Principal Component Analysis for bigmemory Matrices — bigPCA","title":"bigPCA: Principal Component Analysis for bigmemory Matrices — bigPCA","text":"bigPCA package provides high-performance principal component analysis routines work directly bigmemory::big.matrix objects. Data streamed BLAS LAPACK kernels large, file-backed matrices can analysed without materialising dense copies R. Companion helpers compute scores, loadings, correlations, contributions, including variants write results bigmemory::big.matrix destinations used bigalgebra workflows file-based pipelines.","code":""},{"path":[]},{"path":"https://fbertran.github.io/bigPCA/reference/bigPCA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bigPCA: Principal Component Analysis for bigmemory Matrices — bigPCA","text":"Maintainer: Frederic Bertrand frederic.bertrand@lecnam.net","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/bigPCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bigPCA: Principal Component Analysis for bigmemory Matrices — bigPCA","text":"","code":"if (FALSE) { # \\dontrun{ library(bigmemory) mat <- as.big.matrix(matrix(rnorm(20), nrow = 5)) result <- pca_bigmatrix(mat) result$sdev } # }"},{"path":"https://fbertran.github.io/bigPCA/reference/new_bigpca_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal constructors and S3 methods for bigPCA results — new_bigpca_result","title":"Internal constructors and S3 methods for bigPCA results — new_bigpca_result","text":"helpers provide light-weight S3 layer around PCA outputs users can interact familiar generics summary() plot().","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/new_bigpca_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal constructors and S3 methods for bigPCA results — new_bigpca_result","text":"","code":"new_bigpca_result(result, backend)"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigalgebra.html","id":null,"dir":"Reference","previous_headings":"","what":"bigalgebra-backed PCA helpers — pca_bigalgebra","title":"bigalgebra-backed PCA helpers — pca_bigalgebra","text":"Variants PCA helpers stream results directly bigmemory::big.matrix objects, enabling file-backed workflows without materialising dense R matrices.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigalgebra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bigalgebra-backed PCA helpers — pca_bigalgebra","text":"","code":"pca_bigalgebra(   xpMat,   xpRotation = NULL,   center = TRUE,   scale = FALSE,   ncomp = -1L,   block_size = 1024L )  pca_scores_bigalgebra(   xpMat,   xpDest,   rotation,   center,   scale,   ncomp = -1L,   block_size = 1024L )  pca_variable_loadings_bigalgebra(xpRotation, sdev, xpDest)"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigalgebra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bigalgebra-backed PCA helpers — pca_bigalgebra","text":"xpRotation Optionally, either bigmemory::big.matrix external pointer referencing destination big.matrix receives rotation matrix. xpDest Either big.matrix external pointer referencing destination big.matrix stores computed quantity. xpLoadings pca_variable_contributions_bigalgebra(), loadings matrix supplied big.matrix external pointer.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigalgebra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bigalgebra-backed PCA helpers — pca_bigalgebra","text":"pca_bigalgebra(), bigpca object pca_bigmatrix() addition rotation_bigalgebra element referencing populated big.matrix xpRotation supplied. external pointer supplied xpDest, invisibly.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigalgebra.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"bigalgebra-backed PCA helpers — pca_bigalgebra","text":"pca_scores_bigalgebra(): Stream PCA scores destination big.matrix. pca_variable_loadings_bigalgebra(): Populate big.matrix objects derived variable diagnostics.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_bigalgebra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bigalgebra-backed PCA helpers — pca_bigalgebra","text":"","code":"set.seed(456) mat <- bigmemory::as.big.matrix(matrix(rnorm(30), nrow = 6)) rotation_store <- bigmemory::big.matrix(ncol(mat), ncol(mat), type = \"double\") pca_stream <- pca_bigalgebra(mat, xpRotation = rotation_store, ncomp = 2) #> Error: rotation big.matrix has incompatible dimensions score_store <- bigmemory::big.matrix(nrow(mat), 2, type = \"double\") pca_scores_bigalgebra(mat, score_store, pca_stream$rotation, pca_stream$center,     pca_stream$scale, ncomp = 2) #> Error: object 'pca_stream' not found"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_contributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot variable contributions — pca_plot_contributions","title":"Plot variable contributions — pca_plot_contributions","text":"Highlights variables contribute selected principal component. helper works dense matrices returned pca_variable_contributions() well bigmemory::big.matrix objects via sampling.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_contributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot variable contributions — pca_plot_contributions","text":"","code":"pca_plot_contributions(   contributions,   component = 1L,   top_n = 20L,   draw = TRUE,   ... )"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_contributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot variable contributions — pca_plot_contributions","text":"contributions Contribution matrix rows correspond variables columns components. component Integer index component visualise. top_n Number variables largest absolute contribution include bar plot. draw Logical; set FALSE skip plotting. ... Additional arguments passed barplot().","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_contributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot variable contributions — pca_plot_contributions","text":"data frame variables contributions returned invisibly. draw = TRUE, bar plot top variables produced.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sampled PCA scores — pca_plot_scores","title":"Plot sampled PCA scores — pca_plot_scores","text":"Streams subset observations PCA rotation plots scores requested components. Sampling keeps drawn subset small graphics remain interpretable even source big matrix contains millions rows.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sampled PCA scores — pca_plot_scores","text":"","code":"pca_plot_scores(   x,   rotation,   center = numeric(),   scale = numeric(),   components = c(1L, 2L),   max_points = 5000L,   sample = c(\"uniform\", \"head\"),   seed = NULL,   draw = TRUE,   ... )"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sampled PCA scores — pca_plot_scores","text":"x Either bigmemory::big.matrix, standard matrix, data frame. rotation rotation matrix pca_result$rotation. center Optional centering vector. Use numeric() centering applied. scale Optional scaling vector. Use numeric() scaling applied. components Length-two integer vector selecting principal components display. max_points Maximum number observations sample plot. sample Strategy selecting rows. \"uniform\" draws random sample without replacement, whereas \"head\" takes first max_points rows. seed Optional seed make sampling reproducible. draw Logical; set FALSE skip plotting return sampled scores. ... Additional graphical parameters forwarded plot().","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot sampled PCA scores — pca_plot_scores","text":"list containing indices (sampled row indices) scores (corresponding score matrix) returned invisibly. draw = TRUE scatter plot produced.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scree.html","id":null,"dir":"Reference","previous_headings":"","what":"Scree plot for principal component importance — pca_plot_scree","title":"Scree plot for principal component importance — pca_plot_scree","text":"Displays proportion variance explained leading principal components. function caps number displayed components keep visualization legible high-dimensional problems.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scree plot for principal component importance — pca_plot_scree","text":"","code":"pca_plot_scree(   pca_result,   max_components = 25L,   cumulative = TRUE,   draw = TRUE,   ... )"},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scree plot for principal component importance — pca_plot_scree","text":"pca_result list created pca_bigmatrix() pca_bigalgebra() containing standard deviation explained variance elements. max_components Maximum number components display. Defaults 25 available number components, whichever smaller. cumulative Logical flag indicating whether overlay cumulative explained variance line. draw Logical; set FALSE return prepared data without drawing plot (useful testing). ... Additional parameters passed plot().","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plot_scree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scree plot for principal component importance — pca_plot_scree","text":"list component, explained, cumulative vectors returned invisibly. draw = TRUE, function produces scree plot using base graphics.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/pca_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot PCA diagnostics for big data workflows — pca_plots","title":"Plot PCA diagnostics for big data workflows — pca_plots","text":"helpers visualise results returned pca_bigmatrix() companions without requiring users materialise dense intermediate structures. plotting function optionally samples inputs default output remains responsive even underlying big matrix spans millions observations.","code":""},{"path":[]},{"path":"https://fbertran.github.io/bigPCA/reference/resolve_big_pointer.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal component analysis for bigmemory::big.matrix inputs — resolve_big_pointer","title":"Principal component analysis for bigmemory::big.matrix inputs — resolve_big_pointer","text":"Perform principal component analysis (PCA) directly bigmemory::big.matrix without copying data R memory. exported helpers mirror structure base R's prcomp() avoiding need materialise large matrices.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/resolve_big_pointer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal component analysis for bigmemory::big.matrix inputs — resolve_big_pointer","text":"","code":"resolve_big_pointer(x, arg, allow_null = FALSE)"},{"path":"https://fbertran.github.io/bigPCA/reference/resolve_big_pointer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal component analysis for bigmemory::big.matrix inputs — resolve_big_pointer","text":"xpMat Either bigmemory::big.matrix external pointer mat@address references source big.matrix. center Logical; column means subtracted PCA? scale Logical; variables scaled unit variance? Scaling requires center = TRUE. ncomp Number components retain. Use non-positive value keep components returned decomposition. block_size Number rows process per block streaming data BLAS kernels. Larger values improve throughput cost additional memory.","code":""},{"path":"https://fbertran.github.io/bigPCA/reference/resolve_big_pointer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal component analysis for bigmemory::big.matrix inputs — resolve_big_pointer","text":"pca_bigmatrix(), bigpca object mirroring prcomp result elements sdev, rotation, optional center scale vectors, column_sd, eigenvalues, explained_variance, cumulative_variance, sample covariance matrix. object participates S3 generics summary() plot().","code":""},{"path":[]},{"path":"https://fbertran.github.io/bigPCA/reference/resolve_big_pointer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal component analysis for bigmemory::big.matrix inputs — resolve_big_pointer","text":"","code":"set.seed(123) mat <- bigmemory::as.big.matrix(matrix(rnorm(40), nrow = 10)) pca <- pca_bigmatrix(mat, center = TRUE, scale = TRUE, ncomp = 3) scores <- pca_scores_bigmatrix(mat, pca$rotation, pca$center, pca$scale, ncomp = 3) loadings <- pca_variable_loadings(pca$rotation, pca$sdev) correlations <- pca_variable_correlations(pca$rotation, pca$sdev, pca$column_sd) contributions <- pca_variable_contributions(loadings) list(scores = scores, loadings = loadings, correlations = correlations,      contributions = contributions) #> $scores #>              [,1]        [,2]        [,3] #>  [1,]  0.54325339 -0.91493729 -0.41315014 #>  [2,] -0.77428157 -0.84150780  0.40023111 #>  [3,]  1.77362948  0.79996096  0.05039649 #>  [4,]  0.61761772  0.59591822 -0.57031347 #>  [5,]  0.23218256  0.95503144 -0.72268699 #>  [6,]  2.66813521 -0.45268284  0.33775240 #>  [7,] -0.08448606  0.81203899  1.15087152 #>  [8,] -2.43891736  0.54722825 -0.96050148 #>  [9,] -0.40827305 -1.59689839 -0.36789931 #> [10,] -2.12886032  0.09584844  1.09529988 #>  #> $loadings #>            [,1]       [,2]       [,3] #> [1,]  0.8567704  0.2711956  0.3439932 #> [2,]  0.7678169 -0.5050498  0.3324763 #> [3,] -0.7573969  0.3708264  0.5203357 #> [4,]  0.7581891  0.5754452 -0.2056261 #>  #> $correlations #>            [,1]       [,2]       [,3] #> [1,]  0.8982856  0.2843364  0.3606615 #> [2,]  0.7396557 -0.4865261  0.3202821 #> [3,] -0.8136972  0.3983915  0.5590143 #> [4,]  1.4378639  1.0913001 -0.3899587 #>  #> $contributions #>           [,1]       [,2]       [,3] #> [1,] 0.2969361 0.09224839 0.21836250 #> [2,] 0.2384786 0.31993524 0.20398568 #> [3,] 0.2320498 0.17247851 0.49962661 #> [4,] 0.2325354 0.41533786 0.07802521 #>"},{"path":"https://fbertran.github.io/bigPCA/news/index.html","id":"bigpca-010","dir":"Changelog","previous_headings":"","what":"bigPCA 0.1.0","title":"bigPCA 0.1.0","text":"Initial CRAN submission.","code":""}]
